*********Configurando Git por primera vez*******

    git --version
    git config --global user.name "Nombre"
    git config --global user.email correo@gmail.com
    git config --global user.ui true
    git config --global init.defaultBranch main
    git config --list

# asignando visual studio code como editor de configuración de git
    git config --global core.editor "code --wait"
    git config --global -e

# para estandarizar los saltos de línea en windows
    git config --global core.autocrlf true

# para estandarizar los saltos de línea en linux/mac
    git config --global core.autocrlf input

# ver todas las opciones de la configuración en la terminal
    git config -h

# ver todas las opciones de la configuración en el navegador
    git help config

************ Inicializar Git en un directorio local **********
    mkdir carpeta
    cd carpeta
    touch README.md
    touch .gitignore
    git init
    code .

********* Flujo básico **********

# agregar los cambios de un archivo al staged
    git add archivo/directorio
# agregar todos los cambios de todos los archivos al staged
    git add .


# los cambios son comprometidos en el repositorio
# debes escribir el mensaje del cambio
# cuando se abra el archivo de configuración
# al terminar guarda y cierra el archivo
# para que los cambios tengan efecto
    git commit
# es un shortcut del comando anterior
# escribes y confirmas el mensaje del cambio en un sólo paso
    git commit -m "mensaje descriptivo del cambio"


# se agrega el origen remoto de tu repositorio de GitHub
    git remote add origin https:#github.com/usuario/repositorio.git
# la primera vez que vinculamos el repositorio remoto con el local
    git push -u origin master
# para las subsecuentes actualizaciones, sino cambias de rama
    git push


#para descargar los cambios del repositorio remoto al local
    git pull

********** De master a main *******
+++ Para repositorios nuevos +++
    git init
    git add .
    git commit -m "Primer commit"
    git branch -M main
    git remote add origin https:#github.com/usuario/repositorio.git
    git push -u origin main

++++ Para repositorios existentes ++++
    git branch -M main
    git remote add origin https:#github.com/usuario/repositorio.git
    git push -u origin main

***** AYUDA *****
# ayuda en la terminal
    git comando -h
# ayuda en el navegador
    git help comando    

*********** Ignorar archivos *************
# esto es un comentario
archivo.ext
carpeta
/archivo_desde_raiz.ext
# ignorar todos los archivos que terminen en .log
*.log
# excepto production.log
!production.log
# ignorar los archivos terminados en .txt dentro de la carpeta doc,
# pero no en sus subcarpetas
doc/*.txt
# ignorar todos los archivos terminados en .txt dentro de la carpeta doc
# y también en sus subcarpetas
doc/**/*.txt

******** Clonar repositorios **********+
    git clone https:#github.com/usuario/repositorio.git


******* Ramas*******
# crear rama
    git branch nombre-rama

# cambiar de rama
    git checkout nombre-rama

# crear una rama y cambiarte a ella
    git checkout -b rama

# eliminar rama
    git branch -d nombre-rama

# eliminar ramas remotas
    git push origin --delete nombre-rama

#eliminar rama (forzado)
    git branch -D nombre-rama

# listar todas las ramas del repositorio
    git branch

# lista ramas no fusionadas a la rama actual
    git branch --no-merged

# lista ramas fusionadas a la rama actual
    git branch --merged

# rebasar ramas
    git checkout rama-secundaria
    git rebase rama-principal

****** Fusiones****
Une dos ramas. Para hacer una fusión necesitamos:

Situarnos en la rama que se quedará con el contenido fusionado.
Fusionar.
Cuando se fusionan ramas se pueden dar 2 resultados diferentes:

Fast-Forward: La fusión se hace automática, no hay conflictos por resolver.
Manual Merge: La fusión hay que hacerla manual, para resolver conflictos de duplicación de contenido.

# nos cambiamos a la rama principal que quedará de la fusión
    git checkout rama-principal

# ejecutamos el comando merge con la rama secundaria a fusionar
    git merge rama-secundaria

********* Cambios***********
# sin editar el mensaje del último commit
    git commit --amend --no-edit

# editando el mensaje del último commit
    git commit --amend -m "nuevo mensaje para el último commit"

# eliminar el último commit
    git reset --hard HEAD~1

Podemos desplazarnos en el historial del repositorio hacia atrás o adelante en cambios o ramas , sin afectar el repositorio como tal.

# cambiar a una rama
    git checkout nombre-rama

# cambiar a un commit en particular
    git checkout id-commit


**********Registro del historial*********
git log nos permite conocer todo el historial de un proyecto, con la información de la fecha, el autor y id de cada cambio.

    git log

# muestra en una sola línea por cambio
    git log --oneline

# guarda el log en la ruta y archivo que especifiquemos
    git log > commits.txt

# muestra el historial con el formato que indicamos
    git log --pretty=format:"%h - %an, %ar : %s"

# cambiamos la n por cualquier número entero y mostrará los n cambios recientes
    git log -n

# muestra los cambios realizados después de la fecha especificada
    git log --after="2019-07-07 00:00:00"

# muestra los cambios realizados antes de la fecha especificada
    git log --before="2019-07-08 00:00:00"

# muestra los cambios realizados en el rango de fecha especificado
    git log --after="2019-07-07 00:00:00" --before="2019-07-08 00:00:00"

# muestra una gráfica del historial de cambios, rama y fusiones
    git log --oneline --graph --all

# muestra todo el registro de acciones del log
# incluyendo inserciones, cambios, eliminaciones, fusiones, etc.
    git reflog

# diferencias entre el Working Directory y el Staging Area
    git diff


***********Reseteo del historial***********
Podemos eliminar el historial de cambios del proyecto hacia adelante con respecto de un punto de referencia.

#nos muestra el listado de archivos nuevos (untracked), borrados o editados
    git status

# borra HEAD
    git reset --soft

# borra HEAD y Staging
    git reset --mixed

# borra todo: HEAD, Staging y Working Directory
    git reset --hard

# deshace todos los cambios después del commit indicado, preservando los cambios localmente
    git reset id-commit

# desecha todo el historial y regresa al commit especificado
    git reset --hard id-commit

**********Remotos*********
# muestra los orígenes remotos del repositorio
    git remote

# muestra los orígenes remotos con detalle
    git remote -v

# agregar un orígen remoto
    git remote add nombre-orígen https:#github.com/usuario/repositorio.git

# renombrar un orígen remoto
    git remote rename nombre-viejo nombre-nuevo

# eliminar un orígen remoto
    git remote remove nombre-orígen

# descargar una rama remota a local diferente a la principal
    git checkout --track -b rama-remota origin/rama-remota


**********Etiquetas************
Con esta opción git nos permite versionar nuestro código, librería o proyecto.

# listar etiquetas
    git tag

# crea una etiqueta
    git tag numero-versión

# eliminar una etiqueta
    git tag -d numero-versión

# mostrar información de una etiqueta
    git show numero-versión

# sincronizando la etiqueta del repositorio local al remoto
    git add .
    git  tag v1.0.0
    git commit -m "v1.0.0"
    git push origin numero-versión

# generando una etiqueta anotada (con mensaje de commit)
    git add .
    git tag -a "v1.0.0" -m "Mensaje de la etiqueta"
    git push --tags

**** Trucos*******
# Muestra en una línea los commit realizados
    git log --oneline
# Muestra en una línea los commit realizados pero más elegante
    git log --oneline --decorate --all --graph
# Solo muestra los archivos modificados
    git status -s

****** Creando alias globales**********
Los alias nos sirven para crear atajos de comandos, podemos guardar diferentes alias de forma global y quedarán guardados en la configuración de git.

# Guardamos el alias "lg" que ejecutará todo lo que está entre comillas
    git config --global alias.lg "log --oneline --decorate --all --graph"
# Para ver el archivo config con los alias creados
    git config --global -e

********** Renombrar archivos***********
Puede que queramos renombrar un archivo, es recomendable hacerlo directamente en la línea de comandos para registrar los cambios con git.

# Cambiar nombre
    git mv nombreOriginal.vue nombreNuevo.vue
Recuerden hacer el commit para registrar los cambios en git.

******** Eliminar archivos**********
# Cambiar nombre
    git rm nombreArchivo.vue
También recordar hacer el commit para salgar cambios en gi

git config --global init.defaultBranch main


